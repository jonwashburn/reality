{
  "schemaVersion": 1,
  "updatedAt": "2025-09-19T03:00:00Z",
  "clusters": [
    {
      "id": "Pipelines:core",
      "namespace": "IndisputableMonolith.Pipelines",
      "path": "IndisputableMonolith/Pipelines.lean",
      "status": "done",
      "owner": "",
      "notes": "Moved from monolith; noncomputable defs; core unaffected"
    },
    {
      "id": "Ethics.Decision:Parity",
      "namespace": "IndisputableMonolith.Ethics.Decision.Parity",
      "path": "IndisputableMonolith/Ethics/Decision/Parity.lean",
      "status": "done",
      "owner": "",
      "notes": "Parity helpers extracted"
    },
    {
      "id": "Ethics.Alignment:Morph",
      "namespace": "IndisputableMonolith.Ethics.Alignment.Morph",
      "path": "IndisputableMonolith/Ethics/Alignment/Morph.lean",
      "status": "done",
      "owner": "",
      "notes": "Morph + mapMicro + invariance lemmas"
    },
    {
      "id": "Ethics.Decision:Select",
      "namespace": "IndisputableMonolith.Ethics.Decision.Select",
      "path": "IndisputableMonolith/Ethics/Decision/Select.lean",
      "status": "done",
      "owner": "",
      "notes": "Selection helpers extracted (crossAgentParityOk, fairnessBatchOk, choose*)"
    },
    {
      "id": "Ethics.Decision:Mapping",
      "namespace": "IndisputableMonolith.Ethics.Decision.Mapping",
      "path": "IndisputableMonolith/Ethics/Decision/Mapping.lean",
      "status": "done",
      "owner": "",
      "notes": "mapReqMicro and mapping lemmas extracted"
    },
    {
      "id": "Ethics.Decision:BoolProp",
      "namespace": "IndisputableMonolith.Ethics.Decision.BoolProp",
      "path": "IndisputableMonolith/Ethics/Decision/BoolProp.lean",
      "status": "done",
      "owner": "",
      "notes": "Bool↔Prop bridging and Prop stubs"
    },
    {
      "id": "Ethics.Decision:Fairness",
      "namespace": "IndisputableMonolith.Ethics.Decision.Fairness",
      "path": "IndisputableMonolith/Ethics/Decision/Fairness.lean",
      "status": "done",
      "owner": "",
      "notes": "Fairness Prop stubs and bridging lemmas extracted"
    },
    {
      "id": "Ethics.Decision:Examples",
      "namespace": "IndisputableMonolith.Ethics.Decision.Examples",
      "path": "IndisputableMonolith/Ethics/Decision/Examples.lean",
      "status": "done",
      "owner": "",
      "notes": "Decision-layer examples extracted"
    },
    {
      "id": "Ethics:Sigma",
      "namespace": "IndisputableMonolith.Ethics.Sigma",
      "path": "IndisputableMonolith/Ethics/Sigma.lean",
      "status": "done",
      "owner": "",
      "notes": "Sigma model and reciprocity extracted"
    },
    {
      "id": "Ethics:StakeGraph",
      "namespace": "IndisputableMonolith.Ethics.StakeGraph",
      "path": "IndisputableMonolith/Ethics/StakeGraph.lean",
      "status": "done",
      "owner": "",
      "notes": "Stakeholder graph utilities extracted"
    },
    {
      "id": "Masses:SectorParams",
      "namespace": "IndisputableMonolith.Masses.SectorParams",
      "path": "IndisputableMonolith/Masses/SectorParams.lean",
      "status": "done",
      "owner": "",
      "notes": "SectorParams and yardstickOf extracted"
    },
    {
      "id": "Ethics:Truth",
      "namespace": "IndisputableMonolith.Ethics.Truth",
      "path": "IndisputableMonolith/Ethics/Truth.lean",
      "status": "done",
      "owner": "",
      "notes": "Truth closure/ledger utilities extracted"
    },
    {
      "id": "Ethics.Alignment:Temporal",
      "namespace": "IndisputableMonolith.Ethics.Alignment.Temporal",
      "path": "IndisputableMonolith/Ethics/Alignment/Temporal.lean",
      "status": "done",
      "owner": "",
      "notes": "Temporal concatenation lemmas extracted"
    },
    {
      "id": "Recognition:Cycle3",
      "namespace": "IndisputableMonolith.Recognition.Cycle3",
      "path": "IndisputableMonolith/Recognition/Cycle3.lean",
      "status": "done",
      "owner": "",
      "notes": "Cycle3 demo extracted"
    },
    {
      "id": "Causality:BoundedStep",
      "namespace": "IndisputableMonolith.Causality.BoundedStep",
      "path": "IndisputableMonolith/Causality/BoundedStep.lean",
      "status": "done",
      "owner": "",
      "notes": "BoundedStep class extracted"
    },
    {
      "id": "Recognition:ModelingExamples",
      "namespace": "IndisputableMonolith.Recognition.ModelingExamples",
      "path": "IndisputableMonolith/Recognition/ModelingExamples.lean",
      "status": "done",
      "owner": "",
      "notes": "SimpleStructure demo extracted"
    },
    {
      "id": "Quantum:core",
      "namespace": "IndisputableMonolith.Quantum",
      "path": "IndisputableMonolith/Quantum.lean",
      "status": "done",
      "owner": "",
      "notes": "Minimal interface extracted; placeholders only; core unaffected"
    },
    {
      "id": "URCAdapters:core",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters.lean",
      "status": "done",
      "owner": "",
      "notes": "Extracted from monolith; placeholder wiring; core unaffected"
    },
    {
      "id": "Gap45:GroupView",
      "namespace": "IndisputableMonolith.Gap45.GroupView",
      "path": "IndisputableMonolith/Gap45/GroupView.lean",
      "status": "done",
      "owner": "",
      "notes": "Group-theoretic trivial intersection lemma extracted"
    },
    {
      "id": "Gap45:AddGroupView",
      "namespace": "IndisputableMonolith.Gap45.AddGroupView",
      "path": "IndisputableMonolith/Gap45/AddGroupView.lean",
      "status": "done",
      "owner": "",
      "notes": "Additive trivial intersection lemma extracted"
    },
    {
      "id": "Gap45:Beat",
      "namespace": "IndisputableMonolith.Gap45.Beat",
      "path": "IndisputableMonolith/Gap45/Beat.lean",
      "status": "done",
      "owner": "",
      "notes": "Beat/time-lag arithmetic extracted; dependency-light; core unaffected"
    },
    {
      "id": "Gap45:RecognitionBarrier",
      "namespace": "IndisputableMonolith.Gap45.RecognitionBarrier",
      "path": "IndisputableMonolith/Gap45/RecognitionBarrier.lean",
      "status": "done",
      "owner": "",
      "notes": "Extracted minimal scaffold; dependency-light; core unaffected"
    },
    {
      "id": "TruthCore:MRD",
      "namespace": "IndisputableMonolith.TruthCore.MRD",
      "path": "IndisputableMonolith/TruthCore/MRD.lean",
      "status": "done",
      "owner": "",
      "notes": "Extracted scaling/measurement scaffolding; dependency-light; core unaffected"
    },
    {
      "id": "URCGenerators:VerifiedGenerators",
      "namespace": "IndisputableMonolith.URCGenerators",
      "path": "IndisputableMonolith/URCGenerators.lean",
      "status": "done",
      "owner": "",
      "notes": "VerifiedGenerators + route B demo"
    },
    {
      "id": "RH.RS.Scales:delta-general",
      "namespace": "IndisputableMonolith.RH.RS.LedgerUnits",
      "path": "IndisputableMonolith/RH/RS/Scales.lean",
      "status": "done",
      "owner": "",
      "notes": "General δ ≠ 0 helpers (fromZ/toZ/rungOf/kOf)"
    },
    {
      "id": "Gap45:arithmetic",
      "namespace": "IndisputableMonolith.Gap45",
      "path": "IndisputableMonolith/Gap45.lean",
      "status": "done",
      "owner": "",
      "notes": "gcd/lcm facts, Beat/TimeLag, GroupView/AddGroupView"
    },
    {
      "id": "Measurement:CQ",
      "namespace": "IndisputableMonolith.Measurement",
      "path": "IndisputableMonolith/Measurement.lean",
      "status": "done",
      "owner": "",
      "notes": "Map, avg, CQ, score and monotonicity"
    },
    {
      "id": "Recognition:Consent",
      "namespace": "IndisputableMonolith.Recognition",
      "path": "IndisputableMonolith/Recognition/Consent.lean",
      "status": "done",
      "owner": "",
      "notes": "ConsentWindow/ConsentLedger"
    },
    {
      "id": "Ethics:CostModel",
      "namespace": "IndisputableMonolith.Ethics",
      "path": "IndisputableMonolith/Ethics/CostModel.lean",
      "status": "done",
      "owner": "",
      "notes": "CostModel, Prefer/Improves, Composable"
    },
    {
      "id": "Complexity:VertexCover",
      "namespace": "IndisputableMonolith.Complexity.VertexCover",
      "path": "IndisputableMonolith/Complexity/VertexCover.lean",
      "status": "done",
      "owner": "",
      "notes": "Already ported in submodule"
    },
    {
      "id": "Complexity:RSVC",
      "namespace": "IndisputableMonolith.Complexity.RSVC",
      "path": "IndisputableMonolith/Complexity/RSVC.lean",
      "status": "done",
      "owner": "",
      "notes": "Already ported in submodule"
    },
    {
      "id": "Complexity:BalancedParityHidden",
      "namespace": "IndisputableMonolith.Complexity.BalancedParityHidden",
      "path": "IndisputableMonolith/Complexity/BalancedParityHidden.lean",
      "status": "done",
      "owner": "",
      "notes": "Already in submodule"
    },
    {
      "id": "Patterns:core",
      "namespace": "IndisputableMonolith",
      "path": "IndisputableMonolith/Patterns.lean",
      "status": "done",
      "owner": "",
      "notes": "Core patterns ported and green"
    },
    {
      "id": "Streams:core",
      "namespace": "IndisputableMonolith",
      "path": "IndisputableMonolith/Streams.lean",
      "status": "done",
      "owner": "",
      "notes": "Streams + Blocks ported and green"
    },
    {
      "id": "RH.RS:Anchors",
      "namespace": "IndisputableMonolith.RH.RS",
      "path": "IndisputableMonolith/RH/RS/Anchors.lean",
      "status": "done",
      "owner": "",
      "notes": "Anchors ported and green"
    },
    {
      "id": "RH.RS:Bands",
      "namespace": "IndisputableMonolith.RH.RS",
      "path": "IndisputableMonolith/RH/RS/Bands.lean",
      "status": "done",
      "owner": "",
      "notes": "Bands ported and green"
    },
    {
      "id": "RH.RS:Spec",
      "namespace": "IndisputableMonolith.RH.RS.Spec",
      "path": "IndisputableMonolith/RH/RS/Spec.lean",
      "status": "done",
      "owner": "",
      "notes": "Promoted into core (stubbed), builds green"
    },
    {
      "id": "Verification:core",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification.lean",
      "status": "done",
      "owner": "",
      "notes": "Minimal stub complete in core; builds green"
    },
    {
      "id": "Verification:DEC",
      "namespace": "IndisputableMonolith.Verification.DEC",
      "path": "IndisputableMonolith/Verification/DEC.lean",
      "status": "done",
      "owner": "",
      "notes": "Promoted into core (minimal skeleton)"
    },
    {
      "id": "Bridge:BridgeData",
      "namespace": "IndisputableMonolith.Bridge.BridgeData",
      "path": "IndisputableMonolith/Bridge/BridgeData.lean",
      "status": "done",
      "owner": "",
      "notes": "Promoted into core (minimal skeleton, axioms for proofs)"
    },
    {
      "id": "LedgerUnits:delta-one",
      "namespace": "IndisputableMonolith.LedgerUnits",
      "path": "IndisputableMonolith/LedgerUnits.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted delta subgroup; core green"
    },
    {
      "id": "UnitMapping:core",
      "namespace": "IndisputableMonolith.UnitMapping",
      "path": "IndisputableMonolith/UnitMapping.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted affine δ→ℝ mapping; core green"
    },
    {
      "id": "Causality:Basic",
      "namespace": "IndisputableMonolith.Causality",
      "path": "IndisputableMonolith/Causality/Basic.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Kinematics/ReachN/inBall/Reaches extracted; core green"
    },
    {
      "id": "YM:Kernel",
      "namespace": "IndisputableMonolith.YM",
      "path": "IndisputableMonolith/YM/Kernel.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "TransferKernel/MatrixView bridge extracted; core green"
    },
    {
      "id": "Causality:BallP",
      "namespace": "IndisputableMonolith.Causality",
      "path": "IndisputableMonolith/Causality/BallP.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted ballP + lemmas; core green"
    },
    {
      "id": "LNAL:scaffold",
      "namespace": "IndisputableMonolith.LNAL",
      "path": "IndisputableMonolith/LNAL.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted LNAL scaffold; core green"
    }
    ,{
      "id": "Verification:ConeExport",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/ConeExport.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "export of cone_bound; dependency-light; core green"
    }
    ,{
      "id": "PhiSupport:phi_squared",
      "namespace": "IndisputableMonolith.PhiSupport",
      "path": "IndisputableMonolith/PhiSupport.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "proved phi_squared; removed axiom; core green"
    }
    ,{
      "id": "Verification:Calibration",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Calibration.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "CalibrationEvidence moved; dependency-light; core green"
    }
    ,{
      "id": "PhiSupport:phi_fixed_point",
      "namespace": "IndisputableMonolith.PhiSupport",
      "path": "IndisputableMonolith/PhiSupport.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "added phi_fixed_point corollary; core green"
    }
    ,{
      "id": "Verification:DimensionlessConst",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Dimensionless.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "moved dimensionless_const; dependency-light; core green"
    }
    ,{
      "id": "Verification:Claims",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Claims.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "moved Claim types and proof-based checkers; core green"
    }
    ,{
      "id": "Causality:ConeBound",
      "namespace": "IndisputableMonolith.Causality.ConeBound",
      "path": "IndisputableMonolith/Causality/ConeBound.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "BFS finset ball and cardinality bounds; core green"
    }
    ,{
      "id": "MaxwellDEC:Equations",
      "namespace": "IndisputableMonolith.MaxwellDEC",
      "path": "IndisputableMonolith/MaxwellDEC.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted Maxwell DEC scaffold; True stubs; core green"
    }
    ,{
      "id": "MaxwellDEC:scaffold",
      "namespace": "IndisputableMonolith.MaxwellDEC",
      "path": "IndisputableMonolith/MaxwellDEC.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Replaced by MaxwellDEC:Equations entry; promoted and green"
    }
    ,{
      "id": "LedgerUniqueness:core",
      "namespace": "IndisputableMonolith.LedgerUniqueness",
      "path": "IndisputableMonolith/LedgerUniqueness.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "IsAffine and uniqueness scaffold extracted (axiom stubs); core green"
    }
    ,{
      "id": "LightCone:StepBounds",
      "namespace": "IndisputableMonolith.LightCone.StepBounds",
      "path": "IndisputableMonolith/LightCone/StepBounds.lean",
      "status": "in_progress",
      "owner": "agentE",
      "notes": "Per-step bounds and cone bound lemmas"
    }
    ,{
      "id": "Verification:RenderedIndex",
      "namespace": "IndisputableMonolith.Verification.Rendered",
      "path": "IndisputableMonolith/Verification/Rendered.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Rendered index extracted; core green"
    },
    {
      "id": "Verification:Manifest",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Manifest.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Falsifiable + manifest strings/id helpers; core green"
    },
    {
      "id": "Verification:AnchorInvariants",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/AnchorInvariants.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "moved KA/KB anchor invariance theorems; core green"
    },
    {
      "id": "Verification:ZeroKnobs",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Knobs.lean",
      "status": "in_progress",
      "owner": "agentE",
      "notes": "zeroKnobsExports list"
    },
    {
      "id": "RSBridge:Anchor",
      "namespace": "IndisputableMonolith.RSBridge",
      "path": "IndisputableMonolith/RSBridge/Anchor.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Fermion anchor block extracted; noncomputable log/exp; core green"
    },
    {
      "id": "Causality:ReachN",
      "namespace": "IndisputableMonolith.Causality",
      "path": "IndisputableMonolith/Causality/Reach.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Kinematics, ReachN, inBall, ballP; extracted and green"
    }
    ,{
      "id": "Causality:ConeBound",
      "namespace": "IndisputableMonolith.Causality.ConeBound",
      "path": "IndisputableMonolith/Causality/ConeBound.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "BFS finset ball and cardinality bounds; core green"
    }
    ,{
      "id": "Ethics:Invariants",
      "namespace": "IndisputableMonolith.Ethics.Invariants",
      "path": "IndisputableMonolith/Ethics/Invariants.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Monotonicity/Symmetry/Stability props extracted; core green"
    },
    {
      "id": "Measurement:Realization",
      "namespace": "IndisputableMonolith.Measurement",
      "path": "IndisputableMonolith/Measurement/Realization.lean",
      "status": "in_progress",
      "owner": "agentE",
      "notes": "Realization struct and lnalRealization helper"
    }
  ]
}



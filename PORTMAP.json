{
  "schemaVersion": 1,
  "updatedAt": "2025-09-19T03:00:00Z",
  "clusters": [
    {
      "id": "Pipelines:core",
      "namespace": "IndisputableMonolith.Pipelines",
      "path": "IndisputableMonolith/Pipelines.lean",
      "status": "done",
      "owner": "",
      "notes": "Moved from monolith; noncomputable defs; core unaffected"
    },
    {
      "id": "Masses:ExponentGauge",
      "namespace": "IndisputableMonolith.Masses.Exponent.Gauge",
      "path": "IndisputableMonolith/Masses/Exponent/Gauge.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "GaugeEq + refl/symm/trans; core green"
    },
    {
      "id": "Masses:SectorPrimitive",
      "namespace": "IndisputableMonolith.Masses.SectorPrimitive",
      "path": "IndisputableMonolith/Masses/SectorPrimitive.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Primitive/deltaOf/invariance moved; core green"
    },
    {
      "id": "Masses:KernelTypes",
      "namespace": "IndisputableMonolith.Masses",
      "path": "IndisputableMonolith/Masses/KernelTypes.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Extracted core Masses types (gauge/completion/rung); core green"
    },
    {
      "id": "Masses:AnchorPolicy",
      "namespace": "IndisputableMonolith.Masses.AnchorPolicy",
      "path": "IndisputableMonolith/Masses/AnchorPolicy.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "AnchorPolicy + Z_* + ResidueLaw/SectorLaw; noncomputable log φ; core green"
    },
    {
      "id": "Ethics.Decision:Parity",
      "namespace": "IndisputableMonolith.Ethics.Decision.Parity",
      "path": "IndisputableMonolith/Ethics/Decision/Parity.lean",
      "status": "done",
      "owner": "",
      "notes": "Parity helpers extracted"
    },
    {
      "id": "Ethics.Alignment:Morph",
      "namespace": "IndisputableMonolith.Ethics.Alignment.Morph",
      "path": "IndisputableMonolith/Ethics/Alignment/Morph.lean",
      "status": "done",
      "owner": "",
      "notes": "Morph + mapMicro + invariance lemmas"
    },
    {
      "id": "Ethics.Decision:Select",
      "namespace": "IndisputableMonolith.Ethics.Decision.Select",
      "path": "IndisputableMonolith/Ethics/Decision/Select.lean",
      "status": "done",
      "owner": "",
      "notes": "Selection helpers extracted (crossAgentParityOk, fairnessBatchOk, choose*)"
    },
    {
      "id": "Ethics.Decision:Mapping",
      "namespace": "IndisputableMonolith.Ethics.Decision.Mapping",
      "path": "IndisputableMonolith/Ethics/Decision/Mapping.lean",
      "status": "done",
      "owner": "",
      "notes": "mapReqMicro and mapping lemmas extracted"
    },
    {
      "id": "Ethics.Decision:BoolProp",
      "namespace": "IndisputableMonolith.Ethics.Decision.BoolProp",
      "path": "IndisputableMonolith/Ethics/Decision/BoolProp.lean",
      "status": "done",
      "owner": "",
      "notes": "Bool↔Prop bridging and Prop stubs"
    },
    {
      "id": "Ethics.Decision:Fairness",
      "namespace": "IndisputableMonolith.Ethics.Decision.Fairness",
      "path": "IndisputableMonolith/Ethics/Decision/Fairness.lean",
      "status": "done",
      "owner": "",
      "notes": "Fairness Prop stubs and bridging lemmas extracted"
    },
    {
      "id": "Ethics.Decision:Examples",
      "namespace": "IndisputableMonolith.Ethics.Decision.Examples",
      "path": "IndisputableMonolith/Ethics/Decision/Examples.lean",
      "status": "done",
      "owner": "",
      "notes": "Decision-layer examples extracted"
    },
    {
      "id": "Ethics:Sigma",
      "namespace": "IndisputableMonolith.Ethics.Sigma",
      "path": "IndisputableMonolith/Ethics/Sigma.lean",
      "status": "done",
      "owner": "",
      "notes": "Sigma model and reciprocity extracted"
    },
    {
      "id": "Ethics:StakeGraph",
      "namespace": "IndisputableMonolith.Ethics.StakeGraph",
      "path": "IndisputableMonolith/Ethics/StakeGraph.lean",
      "status": "done",
      "owner": "",
      "notes": "Stakeholder graph utilities extracted"
    },
    {
      "id": "Masses:SectorParams",
      "namespace": "IndisputableMonolith.Masses.SectorParams",
      "path": "IndisputableMonolith/Masses/SectorParams.lean",
      "status": "done",
      "owner": "",
      "notes": "SectorParams and yardstickOf extracted"
    },
    {
      "id": "Ethics:Truth",
      "namespace": "IndisputableMonolith.Ethics.Truth",
      "path": "IndisputableMonolith/Ethics/Truth.lean",
      "status": "done",
      "owner": "",
      "notes": "Truth closure/ledger utilities extracted"
    },
    {
      "id": "Ethics.Alignment:Temporal",
      "namespace": "IndisputableMonolith.Ethics.Alignment.Temporal",
      "path": "IndisputableMonolith/Ethics/Alignment/Temporal.lean",
      "status": "done",
      "owner": "",
      "notes": "Temporal concatenation lemmas extracted"
    },
    {
      "id": "Recognition:Cycle3",
      "namespace": "IndisputableMonolith.Recognition.Cycle3",
      "path": "IndisputableMonolith/Recognition/Cycle3.lean",
      "status": "done",
      "owner": "",
      "notes": "Cycle3 demo extracted"
    },
    {
      "id": "Causality:BoundedStep",
      "namespace": "IndisputableMonolith.Causality.BoundedStep",
      "path": "IndisputableMonolith/Causality/BoundedStep.lean",
      "status": "done",
      "owner": "",
      "notes": "BoundedStep class extracted"
    },
    {
      "id": "Recognition:ModelingExamples",
      "namespace": "IndisputableMonolith.Recognition.ModelingExamples",
      "path": "IndisputableMonolith/Recognition/ModelingExamples.lean",
      "status": "done",
      "owner": "",
      "notes": "SimpleStructure demo extracted"
    },
    {
      "id": "Quantum:core",
      "namespace": "IndisputableMonolith.Quantum",
      "path": "IndisputableMonolith/Quantum.lean",
      "status": "done",
      "owner": "",
      "notes": "Minimal interface extracted; placeholders only; core unaffected"
    },
    {
      "id": "URCAdapters:core",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters.lean",
      "status": "done",
      "owner": "",
      "notes": "Extracted from monolith; placeholder wiring; core unaffected"
    },
    {
      "id": "Gap45:GroupView",
      "namespace": "IndisputableMonolith.Gap45.GroupView",
      "path": "IndisputableMonolith/Gap45/GroupView.lean",
      "status": "done",
      "owner": "",
      "notes": "Group-theoretic trivial intersection lemma extracted"
    },
    {
      "id": "Gap45:AddGroupView",
      "namespace": "IndisputableMonolith.Gap45.AddGroupView",
      "path": "IndisputableMonolith/Gap45/AddGroupView.lean",
      "status": "done",
      "owner": "",
      "notes": "Additive trivial intersection lemma extracted"
    },
    {
      "id": "Gap45:Beat",
      "namespace": "IndisputableMonolith.Gap45.Beat",
      "path": "IndisputableMonolith/Gap45/Beat.lean",
      "status": "done",
      "owner": "",
      "notes": "Beat/time-lag arithmetic extracted; dependency-light; core unaffected"
    },
    {
      "id": "Gap45:RecognitionBarrier",
      "namespace": "IndisputableMonolith.Gap45.RecognitionBarrier",
      "path": "IndisputableMonolith/Gap45/RecognitionBarrier.lean",
      "status": "done",
      "owner": "",
      "notes": "Extracted minimal scaffold; dependency-light; core unaffected"
    },
    {
      "id": "TruthCore:MRD",
      "namespace": "IndisputableMonolith.TruthCore.MRD",
      "path": "IndisputableMonolith/TruthCore/MRD.lean",
      "status": "done",
      "owner": "",
      "notes": "Extracted scaling/measurement scaffolding; dependency-light; core unaffected"
    },
    {
      "id": "URCGenerators:VerifiedGenerators",
      "namespace": "IndisputableMonolith.URCGenerators",
      "path": "IndisputableMonolith/URCGenerators.lean",
      "status": "done",
      "owner": "",
      "notes": "VerifiedGenerators + route B demo"
    },
    {
      "id": "RH.RS.Scales:delta-general",
      "namespace": "IndisputableMonolith.RH.RS.LedgerUnits",
      "path": "IndisputableMonolith/RH/RS/Scales.lean",
      "status": "done",
      "owner": "",
      "notes": "General δ ≠ 0 helpers (fromZ/toZ/rungOf/kOf)"
    },
    {
      "id": "Gap45:arithmetic",
      "namespace": "IndisputableMonolith.Gap45",
      "path": "IndisputableMonolith/Gap45.lean",
      "status": "done",
      "owner": "",
      "notes": "gcd/lcm facts, Beat/TimeLag, GroupView/AddGroupView"
    },
    {
      "id": "Measurement:CQ",
      "namespace": "IndisputableMonolith.Measurement",
      "path": "IndisputableMonolith/Measurement.lean",
      "status": "done",
      "owner": "",
      "notes": "Map, avg, CQ, score and monotonicity"
    },
    {
      "id": "Recognition:Consent",
      "namespace": "IndisputableMonolith.Recognition",
      "path": "IndisputableMonolith/Recognition/Consent.lean",
      "status": "done",
      "owner": "",
      "notes": "ConsentWindow/ConsentLedger"
    },
    {
      "id": "Ethics:CostModel",
      "namespace": "IndisputableMonolith.Ethics",
      "path": "IndisputableMonolith/Ethics/CostModel.lean",
      "status": "done",
      "owner": "",
      "notes": "CostModel, Prefer/Improves, Composable"
    },
    {
      "id": "Complexity:VertexCover",
      "namespace": "IndisputableMonolith.Complexity.VertexCover",
      "path": "IndisputableMonolith/Complexity/VertexCover.lean",
      "status": "done",
      "owner": "",
      "notes": "Already ported in submodule"
    },
    {
      "id": "Complexity:RSVC",
      "namespace": "IndisputableMonolith.Complexity.RSVC",
      "path": "IndisputableMonolith/Complexity/RSVC.lean",
      "status": "done",
      "owner": "",
      "notes": "Already ported in submodule"
    },
    {
      "id": "Complexity:BalancedParityHidden",
      "namespace": "IndisputableMonolith.Complexity.BalancedParityHidden",
      "path": "IndisputableMonolith/Complexity/BalancedParityHidden.lean",
      "status": "done",
      "owner": "",
      "notes": "Already in submodule"
    },
    {
      "id": "Patterns:core",
      "namespace": "IndisputableMonolith",
      "path": "IndisputableMonolith/Patterns.lean",
      "status": "done",
      "owner": "",
      "notes": "Core patterns ported and green"
    },
    {
      "id": "Streams:core",
      "namespace": "IndisputableMonolith",
      "path": "IndisputableMonolith/Streams.lean",
      "status": "done",
      "owner": "",
      "notes": "Streams + Blocks ported and green"
    },
    {
      "id": "RH.RS:Anchors",
      "namespace": "IndisputableMonolith.RH.RS",
      "path": "IndisputableMonolith/RH/RS/Anchors.lean",
      "status": "done",
      "owner": "",
      "notes": "Anchors ported and green"
    },
    {
      "id": "RH.RS:Bands",
      "namespace": "IndisputableMonolith.RH.RS",
      "path": "IndisputableMonolith/RH/RS/Bands.lean",
      "status": "done",
      "owner": "",
      "notes": "Bands ported and green"
    },
    {
      "id": "RH.RS:Spec",
      "namespace": "IndisputableMonolith.RH.RS.Spec",
      "path": "IndisputableMonolith/RH/RS/Spec.lean",
      "status": "done",
      "owner": "",
      "notes": "Promoted into core (stubbed), builds green"
    },
    {
      "id": "Verification:core",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification.lean",
      "status": "done",
      "owner": "",
      "notes": "Minimal stub complete in core; builds green"
    },
    {
      "id": "Verification:DEC",
      "namespace": "IndisputableMonolith.Verification.DEC",
      "path": "IndisputableMonolith/Verification/DEC.lean",
      "status": "done",
      "owner": "",
      "notes": "Promoted into core (minimal skeleton)"
    },
    {
      "id": "Bridge:BridgeData",
      "namespace": "IndisputableMonolith.Bridge.BridgeData",
      "path": "IndisputableMonolith/Bridge/BridgeData.lean",
      "status": "done",
      "owner": "",
      "notes": "Promoted into core (minimal skeleton, axioms for proofs)"
    },
    {
      "id": "LedgerUnits:delta-one",
      "namespace": "IndisputableMonolith.LedgerUnits",
      "path": "IndisputableMonolith/LedgerUnits.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted delta subgroup; core green"
    },
    {
      "id": "UnitMapping:core",
      "namespace": "IndisputableMonolith.UnitMapping",
      "path": "IndisputableMonolith/UnitMapping.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted affine δ→ℝ mapping; core green"
    },
    {
      "id": "Causality:Basic",
      "namespace": "IndisputableMonolith.Causality",
      "path": "IndisputableMonolith/Causality/Basic.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Kinematics/ReachN/inBall/Reaches extracted; core green"
    },
    {
      "id": "YM:Kernel",
      "namespace": "IndisputableMonolith.YM",
      "path": "IndisputableMonolith/YM/Kernel.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "TransferKernel/MatrixView bridge extracted; core green"
    },
    {
      "id": "Causality:BallP",
      "namespace": "IndisputableMonolith.Causality",
      "path": "IndisputableMonolith/Causality/BallP.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted ballP + lemmas; core green"
    },
    {
      "id": "LNAL:scaffold",
      "namespace": "IndisputableMonolith.LNAL",
      "path": "IndisputableMonolith/LNAL.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted LNAL scaffold; core green"
    }
    ,{
      "id": "TruthCore:TimeKernelRescale",
      "namespace": "IndisputableMonolith.TruthCore",
      "path": "IndisputableMonolith/TruthCore/TimeKernel.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "extracted time_kernel_dimensionless (axiom alias); core green"
    }
    ,{
      "id": "TruthCore:DisplayExports",
      "namespace": "IndisputableMonolith.TruthCore",
      "path": "IndisputableMonolith/TruthCore/Display.lean",
      "status": "done",
      "owner": "agentG",
      "notes": "Extracted DEC dd=0/Bianchi exporters + display_speed_identity; core green"
    }
    ,{
      "id": "URCAdapters:ELProp",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/ELProp.lean",
      "status": "done",
      "owner": "agentG",
      "notes": "EL_prop + EL_holds extracted with local axioms; core green"
    }
    ,{
      "id": "Verification:ConeExport",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/ConeExport.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "export of cone_bound; dependency-light; core green"
    }
    ,{
      "id": "PhiSupport:phi_squared",
      "namespace": "IndisputableMonolith.PhiSupport",
      "path": "IndisputableMonolith/PhiSupport.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "proved phi_squared; removed axiom; core green"
    }
    ,{
      "id": "Verification:Calibration",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Calibration.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "CalibrationEvidence moved; dependency-light; core green"
    }
    ,{
      "id": "PhiSupport:phi_fixed_point",
      "namespace": "IndisputableMonolith.PhiSupport",
      "path": "IndisputableMonolith/PhiSupport.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "added phi_fixed_point corollary; core green"
    }
    ,{
      "id": "Verification:DimensionlessConst",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Dimensionless.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "moved dimensionless_const; dependency-light; core green"
    }
    ,{
      "id": "Verification:Claims",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Claims.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "moved Claim types and proof-based checkers; core green"
    }
    ,{
      "id": "Causality:ConeBound",
      "namespace": "IndisputableMonolith.Causality.ConeBound",
      "path": "IndisputableMonolith/Causality/ConeBound.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "BFS finset ball and cardinality bounds; core green"
    }
    ,{
      "id": "Gravity.ILG:TimeKernelBasics",
      "namespace": "IndisputableMonolith.Gravity.ILG",
      "path": "IndisputableMonolith/Gravity/ILG.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "extracted w_t basics; axiom stubs; core green"
    }
    ,{
      "id": "MaxwellDEC:Equations",
      "namespace": "IndisputableMonolith.MaxwellDEC",
      "path": "IndisputableMonolith/MaxwellDEC.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "extracted Maxwell DEC scaffold; True stubs; core green"
    }
    ,{
      "id": "MaxwellDEC:scaffold",
      "namespace": "IndisputableMonolith.MaxwellDEC",
      "path": "IndisputableMonolith/MaxwellDEC.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Replaced by MaxwellDEC:Equations entry; promoted and green"
    }
    ,{
      "id": "LedgerUniqueness:core",
      "namespace": "IndisputableMonolith.LedgerUniqueness",
      "path": "IndisputableMonolith/LedgerUniqueness.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "IsAffine and uniqueness scaffold extracted (axiom stubs); core green"
    }
    ,{
      "id": "LightCone:StepBounds",
      "namespace": "IndisputableMonolith.LightCone.StepBounds",
      "path": "IndisputableMonolith/LightCone/StepBounds.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Extracted StepBounds and cone_bound; standalone green; core green"
    }
    ,{
      "id": "ILG:ParamsKernel",
      "namespace": "IndisputableMonolith.ILG.ParamsKernel",
      "path": "IndisputableMonolith/ILG/ParamsKernel.lean",
      "status": "in_progress",
      "owner": "agentE",
      "notes": "Params, ParamProps, w_t, n_of_r, xi_of_bin"
    }
    ,{
      "id": "Constants:KDisplay",
      "namespace": "IndisputableMonolith.Constants.KDisplay",
      "path": "IndisputableMonolith/Constants/KDisplay.lean",
      "status": "in_progress",
      "owner": "agentE",
      "notes": "tau_rec_display, lambda_kin_display, K gate"
    }
    ,{
      "id": "Verification:RenderedIndex",
      "namespace": "IndisputableMonolith.Verification.Rendered",
      "path": "IndisputableMonolith/Verification/Rendered.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Rendered index extracted; core green"
    },
    {
      "id": "Verification:Manifest",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Manifest.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Falsifiable + manifest strings/id helpers; core green"
    },
    {
      "id": "Verification:AnchorInvariants",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/AnchorInvariants.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "moved KA/KB anchor invariance theorems; core green"
    },
    {
      "id": "Verification:ZeroKnobs",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Knobs.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "moved zeroKnobsExports; core green"
    },
    {
      "id": "URCAdapters:Reports",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/Reports.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "routeA_report, lambda_report moved; core green"
    },
    {
      "id": "URCAdapters:TcGrowth",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/TcGrowth.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "tc_growth_prop and lemma moved; core green"
    },
    {
      "id": "URCAdapters:EthicsAdapter",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/EthicsAdapter.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "ethics_invariants_prop/holds + lawfulEthical moved; core green"
    },
    {
      "id": "Verification:AuditSI",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Audit.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "audit_SI_via_bridge_only moved; core green"
    },
    {
      "id": "URCAdapters:Routes",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/Routes.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "RouteA_LawfulBridge moved; core green"
    },
    {
      "id": "Verification:CrossExports",
      "namespace": "IndisputableMonolith.Verification",
      "path": "IndisputableMonolith/Verification/Exports.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "moved gap_delta_time_identity; core green"
    },
    {
      "id": "URCAdapters:EightBeat",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/EightBeat.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "eightbeat_prop/holds moved; core green"
    },
    {
      "id": "URCAdapters:UnitsIdentity",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/UnitsIdentity.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "units_identity_prop/holds moved; core green"
    },
    {
      "id": "URCAdapters:ELProp",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/ELProp.lean",
      "status": "in_progress",
      "owner": "agentE",
      "notes": "EL_prop/EL_holds (stubbed True)"
    },
    {
      "id": "RSBridge:Anchor",
      "namespace": "IndisputableMonolith.RSBridge",
      "path": "IndisputableMonolith/RSBridge/Anchor.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Fermion anchor block extracted; noncomputable log/exp; core green"
    },
    {
      "id": "Causality:ReachN",
      "namespace": "IndisputableMonolith.Causality",
      "path": "IndisputableMonolith/Causality/Reach.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Kinematics, ReachN, inBall, ballP; extracted and green"
    }
    ,{
      "id": "Causality:ConeBound",
      "namespace": "IndisputableMonolith.Causality.ConeBound",
      "path": "IndisputableMonolith/Causality/ConeBound.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "BFS finset ball and cardinality bounds; core green"
    }
    ,{
      "id": "Ethics:Invariants",
      "namespace": "IndisputableMonolith.Ethics.Invariants",
      "path": "IndisputableMonolith/Ethics/Invariants.lean",
      "status": "done",
      "owner": "agentE",
      "notes": "Monotonicity/Symmetry/Stability props extracted; core green"
    },
    {
      "id": "Potential:T4Uniqueness",
      "namespace": "IndisputableMonolith.Potential",
      "path": "IndisputableMonolith/Potential.lean",
      "status": "done",
      "owner": "agentG",
      "notes": "extracted T4 lemmas; dependency-light; core green"
    },
    {
      "id": "ClassicalBridge:CoarseGrain",
      "namespace": "IndisputableMonolith.ClassicalBridge",
      "path": "IndisputableMonolith/ClassicalBridge/CoarseGrain.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "extracted coarse-grain schema; dependency-light; core green"
    },
    {
      "id": "TruthCore:Display",
      "namespace": "IndisputableMonolith.TruthCore",
      "path": "IndisputableMonolith/TruthCore/Display.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "extracted display_speed_identity; minimal axiom; core green"
    },
    {
      "id": "Constants:AlphaLockedClag",
      "namespace": "IndisputableMonolith.Constants",
      "path": "IndisputableMonolith/Constants/AlphaLocked.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "extracted alpha_locked/Clag and bounds; core green"
    },
    {
      "id": "Cost:JlogBasics",
      "namespace": "IndisputableMonolith.Cost",
      "path": "IndisputableMonolith/Cost/Jlog.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "Jlog definition + zero lemma; dependency-light; core green"
    },
    {
      "id": "Cost:PhiFixedPointExpose",
      "namespace": "IndisputableMonolith.Cost",
      "path": "IndisputableMonolith/Cost/PhiFixedPoint.lean",
      "status": "in_progress",
      "owner": "cursor-gpt5",
      "notes": "Expose phi_fixed_point into Cost namespace"
    },
    {
      "id": "Cost:Demo",
      "namespace": "IndisputableMonolith.CostDemo",
      "path": "IndisputableMonolith/Cost/Demo.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "Gcosh demo extracted; dependency-light; core green"
    },
    {
      "id": "Measurement:Realization",
      "namespace": "IndisputableMonolith.Measurement",
      "path": "IndisputableMonolith/Measurement/Realization.lean",
      "status": "in_progress",
      "owner": "agentE",
      "notes": "Realization struct and lnalRealization helper"
    },
    {
      "id": "Masses:ExponentKernel",
      "namespace": "IndisputableMonolith.Masses.Exponent",
      "path": "IndisputableMonolith/Masses/ExponentKernel.lean",
      "status": "in_progress",
      "owner": "agentE",
      "notes": "GaugeEq relation and factorization/functoriality helpers"
    }
    ,{
      "id": "TruthCore:Display",
      "namespace": "IndisputableMonolith.TruthCore",
      "path": "IndisputableMonolith/TruthCore/Display.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "extracted DEC wrappers + display identity; axiom stubs; core green"
    }
    ,{
      "id": "ILG:XiBinsMonotonicity",
      "namespace": "IndisputableMonolith.ILG",
      "path": "IndisputableMonolith/ILG/XiBins.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "extracted xi_of_u/bin; monotonicity axiom stub; core green"
    }
    ,{
      "id": "TruthCore:ILGDisplayAlias",
      "namespace": "IndisputableMonolith.TruthCore",
      "path": "IndisputableMonolith/TruthCore/ILGDisplay.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "export alias ILG_w_t_display; minimal deps; core green"
    }
    ,{
      "id": "TruthCore:TimeKernelDimensionless",
      "namespace": "IndisputableMonolith.TruthCore",
      "path": "IndisputableMonolith/TruthCore/TimeKernel.lean",
      "status": "in_progress",
      "owner": "cursor-gpt5",
      "notes": "alias theorem using ILG.w_time_ratio_rescale"
    }
    ,{
      "id": "TruthCore:MRDScaffold",
      "namespace": "IndisputableMonolith.TruthCore.MRD",
      "path": "IndisputableMonolith/TruthCore/MRD.lean",
      "status": "in_progress",
      "owner": "cursor-gpt5",
      "notes": "ScalingModel/FundamentalProcess/EmergentMeasurement/MeasurementMap"
    }
    ,{
      "id": "URCAdapters:LawfulNormalizer",
      "namespace": "IndisputableMonolith.URCAdapters",
      "path": "IndisputableMonolith/URCAdapters/LawfulNormalizer.lean",
      "status": "in_progress",
      "owner": "cursor-gpt5",
      "notes": "lawful_normalizer_exists_unique lemma; dependency-light"
    }
    ,{
      "id": "Ethics:CostModel",
      "namespace": "IndisputableMonolith.Ethics",
      "path": "IndisputableMonolith/Ethics/CostModel.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "CostModel, Prefer, Composable framework extracted; axiom stubs for CQ/Measurement deps; core green"
    }
    ,{
      "id": "Ablation:Harness",
      "namespace": "IndisputableMonolith.Ablation",
      "path": "IndisputableMonolith/Ablation.lean",
      "status": "done",
      "owner": "cursor-gpt5",
      "notes": "Integer charge transforms and contradiction lemmas extracted; axiom stubs for Species/Sector deps; core green"
    }
  ]
}


